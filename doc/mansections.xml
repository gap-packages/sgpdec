# ALPHABETICAL ORDER (by label)

<!-- #an empty one for template -->
<!-- <#GAPDoc Label=""> -->
<!--   <ManSection> -->
<!--     <Func Name="" Arg=""/> -->
<!--     <Returns></Returns> -->
<!--     <Description> -->
<!--       <Example> -->
<!--       </Example> -->
<!--     </Description> -->
<!--   </ManSection> -->
<!-- <#/GAPDoc> -->

##A

<#GAPDoc Label="AsCascade">
  <ManSection>
    <Func Name="AsCascade" Arg="transformation"/>
    <Returns>Coordinatized form of <Arg>transformation</Arg></Returns>
    <Description>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="AsCoords">
  <ManSection>
    <Oper Name="AsCoords" Arg="point, domain"/>
   <Oper Name="AsCoords" Arg="point, cascadesemigroup" Label="CascSgpAsCoords"/>
    <Returns>Coordinatized form of a <Arg>point</Arg>.</Returns>
    <Description>
The <Arg>domain</Arg> is the set of coordinate tuples.
<Example>
gap> dom := EnumeratorOfCartesianProduct([1..3],[1..2]);
&lt;enumerator&gt;
gap> AsList(dom);
[ [ 1, 1 ], [ 1, 2 ], [ 2, 1 ], [ 2, 2 ], [ 3, 1 ], [ 3, 2 ] ]
gap> AsCoords(1,dom);
[ 1, 1 ]
gap> AsCoords(5,dom);
[ 3, 1 ]
</Example>
Alternatively, when working with a cascade semigroup, the semigroup
itself can be given as an argument.
<Example>
gap> hcs := HolonomyCascadeSemigroup(FullTransformationSemigroup(5));
&lt;cascade semigroup with 3 generators, 4 levels with (5, 4, 3, 2) pts&gt;
gap> Size(DomainOf(hcs));
120
gap> AsCoords(1,hcs);
[ 1, 1, 1, 1 ]
gap> AsCoords(120,hcs);
[ 5, 4, 3, 2 ]
gap> AsCoords(79,hcs);
[ 4, 2, 1, 1 ]
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="AsFLCascade">
  <ManSection>
    <Func Name="AsFLCascade" Arg="p, FLG"/>
    <Returns>Coordinatized form of permutation p in an FL cascade group.</Returns>
    <Description>
<Example><![CDATA[
gap> D4 := Group([(1,2,3,4), (1,2)(3,4)]);
Group([ (1,2,3,4), (1,2)(3,4) ])
gap> FLD4 := FLCascadeGroup([D4, Stabilizer(D4, [1,3], OnSets), Stabilizer(D4, 1)],1);
<cascade group with 2 generators, 2 levels with (2, 2) pts>
gap> c := AsFLCascade((1,2,3,4), FLD4);
<perm cascade with 2 levels with (2, 2) pts, 2 dependencies>
gap> Display(c);
Dependency function of depth 1 with 1 dependencies.
[ ] -> (1,2)
Dependency function of depth 2 with 1 dependencies.
[ 1 ] -> (1,2)
gap> AsFLPermutation(c, FLD4);
(1,2,3,4)
]]></Example>

    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="AsFLCoords">
  <ManSection>
    <Func Name="AsFLCoords" Arg="x, FLG"/>
    <Returns>Coordinatized form of state x in an FL cascade group.</Returns>
    <Description>
<Example><![CDATA[
gap> D4 := Group([(1,2,3,4), (1,2)(3,4)]);
Group([ (1,2,3,4), (1,2)(3,4) ])
gap> FLD4 := FLCascadeGroup([D4, Stabilizer(D4, [1,3], OnSets), Stabilizer(D4, 1)],1);
<cascade group with 2 generators, 2 levels with (2, 2) pts>
gap> AsFLCoords(1,FLD4);
[ 1, 1 ]
gap> AsFLCoords(2,FLD4);
[ 2, 2 ]
gap> AsFLCoords(3,FLD4);
[ 1, 2 ]
gap> AsFLCoords(4,FLD4);
[ 2, 1 ]
gap> AsFLPoint([1,1],FLD4);
1
]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="AsFLPermutation">
  <ManSection>
    <Func Name="AsFLPermutation" Arg="cp, FLG"/>
    <Returns>Mapping a permutation cascade down to a permutation. </Returns>
    <Description>
      The inverse of <Ref Func="AsFLCascade"/>.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="AsFLPoint">
  <ManSection>
    <Func Name="AsFLPoint" Arg="coords, FLG"/>
    <Returns>State x that the given coordinates map down to in an FL cascade group.</Returns>
    <Description>
      The inverse of <Ref Func="AsFLCoords"/>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="AsHolonomyCascade">
  <ManSection>
    <Func Name="AsHolonomyCascade" Arg="t, skeleton"/>
    <Returns>Cascade transformation lift of a transformation  <Arg>t</Arg> (state) in a holonomy decomposition described by its skeleton.</Returns>
    <Description>
<Example><![CDATA[
gap> S := Semigroup([Transformation([2,2,1,3,4]), Transformation([2,1,4,3,5])]);;
gap> sk :=Skeleton(S);;
gap> ct := AsHolonomyCascade(Generators(S)[1], sk);
<trans cascade with 5 levels with (2, 2, 2, 2, 2) pts, 17 dependencies>
gap> AsHolonomyTransformation(ct, sk);
Transformation( [ 2, 2, 1, 3, 4 ] )
]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="AsHolonomyCoords">
  <ManSection>
    <Func Name="AsHolonomyCoords" Arg="point, skeleton"/>
    <Returns>Coordinatized form of a <Arg>point</Arg> (state) in a holonomy decomposition.</Returns>
    <Description>
The returned coordinate tuple is a random one chosen from the possible lifts.
<Example>
gap> S := Semigroup([Transformation([2,2,1,3,4]), Transformation([2,1,4,3,5])]);;
gap> sk := Skeleton(S);;
gap> AsHolonomyPoint(AsHolonomyCoords(1,sk),sk);
1
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="AsHolonomyPoint">
  <ManSection>
    <Func Name="AsHolonomyPoint" Arg="coords, skeleton"/>
    <Returns>The state the coordinates map down to.</Returns>
    <Description>
The inverse of <Ref Func="AsHolonomyCoords"/>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="AsHolonomyTransformation">
  <ManSection>
    <Func Name="AsHolonomyTransformation" Arg="ct, skeleton"/>
    <Returns>Transformation as a result of mapping down a cascade transformation  <Arg>ct</Arg> in a holonomy decomposition described by its skeleton.</Returns>
    <Description>
      The inverse of <Ref Func="AsHolonomyCascade"/>
    </Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="AsPoint">
  <ManSection>
    <Oper Name="AsPoint" Arg="coords, compdoms, dom"/>
    <Oper Name="AsPoint" Arg="coords, cascadesemigroup" Label="AsPointForCascadeProds"/>
    <Returns></Returns>
    <Description>
The `inverse' of <Ref Oper="AsCoords"/>.
    </Description>
  </ManSection>
<#/GAPDoc>


##C

<#GAPDoc Label="Cascade">
  <ManSection>
    <Func Name="Cascade" Arg="list, deps"/>
    <Returns>The domains of the dependency function in a list of
    lazily evaluated list enumerators.
    </Returns>
    <Description>
The <C>list</C> argument is the same as the for <Ref Func="DependencyDomains"/>.
<Example>
gap> FlipFlop := SemigroupByGenerators([Transformation([1,1]),Transformation([2,2]),
>              Transformation([1,2])]);;
gap> T3 := FullTransformationSemigroup(3);;
gap> c := Cascade([FlipFlop,T3],[ [[],Transformation([1,1])],
>               [[1],Transformation([3,3,2])],[[2],Transformation([2,3,2])]]);
&lt;trans cascade with 2 levels with (2, 3) pts, 3 dependencies&gt;
gap> Display(c);
Dependency function of depth 1 with 1 dependencies.
[ ] -&gt; Transformation( [ 1, 1 ] )
Dependency function of depth 2 with 2 dependencies.
[ 1 ] -&gt; Transformation( [ 3, 3, 2 ] )
[ 2 ] -&gt; Transformation( [ 2, 3, 2 ] )
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="CascadeAttributes">
  <ManSection> <Heading>Attributes of cascades</Heading>
<Attr Name="DomainOf" Arg="cascade" Label="CascadeDomainOf"/>
    <Returns>The dependency domain</Returns>
<Attr Name="ComponentDomains" Arg="cascade" Label="CascadeComponentDomains"/>
    <Returns>The dependency domain</Returns>
<Attr Name="DependencyDomainsOf" Arg="cascade" Label="CascadeDependencyDomainsOf"/>
    <Returns>The dependency domain</Returns>
<Attr Name="NrDependencies" Arg="cascade" Label="CascadeNrDependencies"/>
    <Returns>The number of non-identity dependency values.</Returns>
<Attr Name="NrComponents" Arg="cascade" Label="CascadeNrComponents"/>
    <Returns>The number of building blocks.</Returns>
<Attr Name="NrDependencyFuncArgs" Arg="cascade" Label="CascadeNrDependencyFuncArgs"/>
    <Returns>The number of possible coordinate prefixes.</Returns>
<Attr Name="DependencyFunctionsOf" Arg="cascade" Label="DependencyFunctionsOf"/>
    <Returns>The dependency functions ordered in a list according to their depth.</Returns>
<Description>
Some of the attributes are aggregates of the contained dependency functions' attributes.
</Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="CascadeComposition">
<ManSection> <Heading>Multiplying cascades</Heading>
<Func Name="CascadeComposition" Arg="cascade1, cascade2"/>
  <Returns><Arg>cascade1</Arg>*<Arg>cascade2</Arg>.</Returns>
<Description>
This is the function registered as the default multiplication operation *.
<Example>
gap> c1 := Cascade([2,3], [ [[],Transformation([2,1])],
>                          [[2],Transformation([3,1,3])],
>                          [[1],Transformation([2,1,2])] ]);;
gap> c2 := Cascade([2,3], [ [[],Transformation([2,2])],
>                          [[1],Transformation([1,1,3])],
>                          [[2],Transformation([3,1,2])] ]);;
gap> Display(CascadeComposition(c1,c2));
Dependency function of depth 1 with 1 dependencies.
[ ] -&gt; Transformation( [ 2, 2 ] )
Dependency function of depth 2 with 2 dependencies.
[ 1 ] -&gt; Transformation( [ 1, 3, 1 ] )
[ 2 ] -&gt; Transformation( [ 3, 1, 3 ] )
gap> Display(c2*c1);
Dependency function of depth 1 with 1 dependencies.
[ ] -&gt; Transformation( [ 1, 1 ] )
Dependency function of depth 2 with 2 dependencies.
[ 1 ] -&gt; Transformation( [ 3, 3, 3 ] )
[ 2 ] -&gt; Transformation( [ 3, 3, 1 ] )
</Example>
</Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="CreateCascade">
  <ManSection>
    <Func Name="CreateCascade" Arg="dom, compdoms, depfuncs, depdom, type"/>
    <Returns>A cascade.</Returns>
    <Description>
Low-level cascade creating function. Subject to change.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="ComponentsOfCascadeProduct">
  <ManSection>
    <Attr Name="ComponentsOfCascadeProduct" Arg="cascprod"/>
    <Returns>The building components of the casacade product.</Returns>
    <Description>
<Example>
gap> s1 := Transformation([1,1,2]);;
gap> s2 := Transformation([2,3,2]);;
gap> t1 := Transformation([2,2,2,4]);;
gap> t2 := Transformation([4,3,2,1]);;
gap> c := Cascade([[1..3],[1..4]],[ [[],s1*s2], [[1],t1*t2], [[2],t2*t1] ]);
&lt;trans cascade with 2 levels with (3, 4) pts, 3 dependencies&gt;
gap> ComponentsOfCascadeProduct(Semigroup(c));
[ &lt;commutative transformation semigroup of degree 2 with 1 generator&gt;,
  &lt;transformation semigroup of degree 4 with 2 generators&gt; ]
</Example>
Warning! This may return something bigger as the actual component.
The current algorithm takes the union of values as the generating set,
though they may not be multiplied in the cascade product.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="ConcreteCoords">
  <ManSection>
    <Func Name="Concretize" Arg="domains, abstract_state"/>
    <Returns>Returns a concrete state matching the abstract state.</Returns>
    <Func Name="AllConcreteCoords" Arg="domains, abstract_state"/>
    <Returns>Returns all concrete states matching the abstract state.</Returns>
    <Description>
Abstract coordinate tuples  contain unspecified levels, either denoted by a 0 value or simply omitting deeper levels.
    </Description>
  </ManSection>
<#/GAPDoc>


##D

<#GAPDoc Label="Dependencies">
  <ManSection>
    <Func Name="Dependencies" Arg="depfunc"/>
    <Returns>All dependencies, argument value pairs.</Returns>
    <Description>
      <Example>
gap> s1 := Transformation([1,1,2]);;
gap> s2 := Transformation([2,3,2]);;
gap> depdom := DependencyDomains([2,3])[2];;
gap> df := DependencyFunction(depdom,[ [[1],s1], [[2],s1*s2]]);
&lt;depfunc of depth 2 with 2 deps&gt;
gap> Dependencies(df);
[ [ [ 1 ], Transformation( [ 1, 1, 2 ] ) ],
  [ [ 2 ], Transformation( [ 2, 2 ] ) ] ]
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="DependencyDomains">
  <ManSection>
    <Func Name="DependencyDomains" Arg="list"/>
    <Returns>The domains of the dependency function in a list of
    lazily evaluated list enumerators.
    </Returns>
    <Description>
The argument <A>list</A> can be a list of
<List>
<Item> of positive integers, the cardinalities of the component's state sets,</Item>
<Item> the state sets,</Item>
<Item> the components, domain sizes are inferred in this case by using  <Ref Attr="DegreeOfTransformationSemigroup" BookName="ref"/> and <Ref Attr="LargestMovedPoint" BookName="ref"/>.</Item>
</List>

<Example>
gap> G := SymmetricGroup(IsPermGroup, 3);
Sym( [ 1 .. 3 ] )
gap> S := Semigroup([Transformation([2,2,4,4]),Transformation([3,2,3,2])]);
&lt;transformation semigroup of degree 4 with 2 generators&gt;
gap> dd1 := DependencyDomains([G,S]);
[ [ [  ] ], &lt;enumerator&gt; ]
gap> dd2 := DependencyDomains([3,4]);
[ [ [  ] ], &lt;enumerator&gt; ]
gap> dd3 := DependencyDomains([[1..3],[1..4]]);
[ [ [  ] ], &lt;enumerator&gt; ]
gap> dd1 = dd2 and dd2  = dd3;
true
</Example>

The <M>n</M>th dependency domain is the direct product of the state sets of the first <M>n-1</M> components.
<Example>
gap> depdoms := DependencyDomains([3,2,2]);
[ [ [  ] ], &lt;enumerator&gt;, &lt;enumerator&gt; ]
gap> AsList(depdoms[1]);
[ [  ] ]
gap> AsList(depdoms[2]);
[ [ 1 ], [ 2 ], [ 3 ] ]
gap> AsList(depdoms[3]);
[ [ 1, 1 ], [ 1, 2 ], [ 2, 1 ], [ 2, 2 ], [ 3, 1 ], [ 3, 2 ] ]
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="DependencyFunction">
  <ManSection>
    <Func Name="DependencyFunction" Arg="depdom, deps"/>
    <Returns>A dependency function on domain <A>depdom</A> with
non-identity values defined in the list of dependencies <A>deps</A>.
    </Returns>
    <Description>
      The dependencies are given in <C>[argument,value]</C> format.
<Example>
gap> depdoms := DependencyDomains([2,3]);
[ [ [  ] ], &lt;enumerator&gt; ]
gap> df := DependencyFunction(depdoms[1], [[[],(1,2)]] );
&lt;depfunc of depth 1 with 1 deps&gt;
gap> Display(df);
Dependency function of depth 1 with 1 dependencies.
[ ] -&gt; (1,2)
gap> df2 := DependencyFunction(depdoms[2], [[[1],(1,3)], [[2],(1,2)]] );
&lt;depfunc of depth 2 with 2 deps&gt;
gap> Display(df2);
Dependency function of depth 2 with 2 dependencies.
[ 1 ] -&gt; (1,3)
[ 2 ] -&gt; (1,2)
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="DependencyFunctions">
  <ManSection>
    <Func Name="DependencyFunctions" Arg="depdom, deps"/>
    <Returns>A list of dependency functions containing the given dependencies
    at their corresponding levels.
    </Returns>
    <Description>
<Example>
gap> depdoms := DependencyDomains([5,3,2,4]);;
gap> deps :=
>       [
>         [ [1,2] , (2,4) ],
>         [ [5,3,1] , (1,2)(4,3) ],
>         [ [2,3] , (1,2) ],
>         [ [] , (1,2,4,3) ]
>         ];;
gap>  depfuncs := DependencyFunctions(depdoms, deps);
[ &lt;depfunc of depth 1 with 1 deps&gt;, &lt;depfunc of depth 2 with 0 deps&gt;,
  &lt;depfunc of depth 3 with 2 deps&gt;, &lt;depfunc of depth 4 with 1 deps&gt; ]
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="DependencyFunctionAttributes">
  <ManSection> <Heading>Attributes of dependency functions</Heading>
<Attr Name="DomainOf" Arg="depfunc"/>
    <Returns>The dependency Domain</Returns>
<Attr Name="NrDependencies" Arg="depfunc"/>
    <Returns>The number of non-identity dependency values.</Returns>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="DependencyValues">
  <ManSection>
    <Func Name="DependencyValues" Arg="depfunc"/>
    <Returns>Compacted duplicate free list of values of the function.</Returns>
    <Description>
<Example>
gap> t1 := Transformation([2,2,2,4]);;
gap> t2 := Transformation([4,3,2,1]);;
gap> depdom := DependencyDomains([2,3,4])[3];;
gap> df := DependencyFunction(depdom,[ [[1,1],t1], [[2,3],t2*t1], [[2,1],t2^5]]);
&lt;depfunc of depth 3 with 3 deps&gt;
gap> DependencyValues(df);
[ Transformation( [ 2, 2, 2 ] ), Transformation( [ 4, 3, 2, 1 ] ),
  Transformation( [ 4, 2, 2, 2 ] ) ]
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="DisplayFLComponents">
  <ManSection>
    <Func Name="DisplayFLComponents" Arg="FLG"/>
    <Func Name="DisplayFLComponents" Arg="subgroup_chain"/>
    <Description>
Display a concise textual summary of the FL decomposition components. Works both with a cascade group (that is a result of an FL decomposition) and simply with a subgroup chain.
<Example><![CDATA[
gap> FLG := FLCascadeGroup(SymmetricGroup(4));
<cascade group with 2 generators, 3 levels with (2, 3, 4) pts>
gap> DisplayFLComponents(FLG);
1: (2,C2)
2: (3,C3)
3: (4,C2 x C2)
gap> DisplayFLComponents(ChiefSeries(SymmetricGroup(4)));
1: (2,C2)
2: (3,C3)
3: (4,C2 x C2)
]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="DisplayHolonomyComponents">
  <ManSection>
    <Func Name="DisplayHolonomyComponents" Arg="skeleton"/>
    <Description>
Display a concise textual summary of the holonomy decomposition components.
<Example>
gap> DisplayHolonomyComponents(Skeleton(Semigroup(
>                 [Transformation([1,1,2,3,5,4]),
>                  Transformation([3,4,1,6,1,5])])));
1: 2
2: 3
3: 3
4: 3 (4,A4)
5: (3,S3)
6: (2,C2)
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="DotCascade">
  <ManSection>
    <Func Name="DotCascade" Arg="cascade"/>
    <Returns>String containing GraphViz source code for the tree diagram of the given cascade.</Returns>
    <Description>
    </Description>
  </ManSection>
<#/GAPDoc>


##E

<#GAPDoc Label="EvalWordInSkeleton">
  <ManSection>
    <Func Name="EvalWordInSkeleton" Arg="skeleton, word"/>
    <Returns>The transformation represented by the given word.</Returns>
    <Description>
In the skeleton transformation are often represented as lists of integers indexing the generators, the so called <E>words</E>.
This function evaluates of a word in the skeleton. Added for convenience, no sanity check is done at the moment.
<Example>
gap> T := FullTransformationMonoid(4);
&lt;full transformation monoid of degree 4&gt;
gap> Generators(T);
[ Transformation( [ 2, 3, 4, 1 ] ), Transformation( [ 2, 1 ] ),
  Transformation( [ 1, 2, 3, 1 ] ) ]
gap> sk := Skeleton(T);;
gap> EvalWordInSkeleton(sk,[]);
()
gap> EvalWordInSkeleton(sk,[1]);
Transformation( [ 2, 3, 4, 1 ] )
gap> EvalWordInSkeleton(sk,[2]);
Transformation( [ 2, 1 ] )
gap> EvalWordInSkeleton(sk,[3]);
Transformation( [ 1, 2, 3, 1 ] )
gap> EvalWordInSkeleton(sk,[1,2,3]);
Transformation( [ 1, 3, 1, 2 ] )
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="ExtendedImageSet">
  <ManSection>
    <Attr Name="ExtendedImageSet" Arg="skeleton"/>
    <Returns>The extended set of images of the semigroup action.</Returns>
    <Description>
The state set, the singletons and all image sets <M>X^s, s\in S</M>.
Stored in a HashSet, thus it is useful for quick checks for the existence of an image.
<Example>
gap> S := Semigroup(Transformation([1,1,3,3]));
&lt;commutative transformation semigroup of degree 4 with 1 generator&gt;
gap> sk := Skeleton(S);;
gap> FiniteSet([1,3],4) in ExtendedImageSet(sk);
true
gap> FiniteSet([2,3],4) in ExtendedImageSet(sk);
false
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

##F

<#GAPDoc Label="FiniteSet">
  <ManSection> <Heading>Creating finite sets</Heading>
<Func Name="FiniteSet" Arg="list, [n]"/>
    <Returns>finite set.</Returns>
<Description>
The underlying boolean list defines the size of the universe of which the finite set is a subset.
somewhat misleadingly <C>Size</C> returns the size of the universe, but the number of elements can be
obtained by <Ref Func="SizeBlist" BookName="ref"/>, or using synonyms <C>Cardinality</C>,<C>FiniteSetSize</C>.
<Example>
gap> SgpDecFiniteSetDisplayOn();
gap> P := FiniteSet([1,5]);
{1,5}
gap> Size(P);
5
gap> Cardinality(P);
2
gap> FiniteSetSize(P);
2
gap> SizeBlist(P);
2
gap> SgpDecFiniteSetDisplayOff();
gap> P;
[ true, false, false, false, true ]
</Example>
If the size of the universe is important, then it can be explicitly given.
<Example>
gap> P := FiniteSet([1,2],111);;
gap> Cardinality(P);
2
gap> Size(P);
111
</Example>
</Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="FLCascadeGroup">
  <ManSection>
    <Oper Name="FLCascadeGroup" Arg="chain, point"/>
    <Oper Name="FLCascadeGroup" Arg="chain"/>
    <Oper Name="FLCascadeGroup" Arg="group"/>
    <Returns>Cascade group isomorphic to <C>G</C>.</Returns>
    <Description>
      The decomposition is done based on a subgroup chain. If the subgroup chain ends in a stabilizer of a point, then the decomposition is isomorphic as a permutation group, i.e. the states are coordinatized as well. In that case the stabilized point needs to be explicitly given. the decomposition will only contain the orbit of this point, so for non-transitive actions the orbits have to be handled separately.

      An arbitrary chain also can be given as an input. If the chain goes down to trivial group, then the right regular representation is coordinatized.

      If only a group is given, then the decomposition is done for the chief series and for the orbit of 1.
<Example>
gap> S4 := SymmetricGroup(IsPermGroup,4);;
gap> flS4 := FLCascadeGroup(S4);
&lt;cascade group with 2 generators, 3 levels with (2, 3, 4) pts&gt;
gap> List(ComponentsOfCascadeProduct(flS4),StructureDescription);
[ "C2", "C3", "C2 x C2" ]
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="FLCoords2Perm">
  <ManSection>
      <Oper Name="FLCoords2Perm" Arg="coords, transversals"/>
      <Oper Name="FLCoords2Perm" Arg="coords, FLG"/>
    <Returns>The permutation corresponding to  <Arg>coords</Arg>.</Returns>
    <Description>
        The combination of <Ref Func="FLCoords2Reps"/> and <Ref Func="Reps2Perm"/>.
</Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="FLCoords2Reps">
  <ManSection>
      <Oper Name="FLCoords2Reps" Arg="coords, transversals"/>
      <Oper Name="FLCoords2Reps" Arg="coords, FLG"/>
    <Returns>Coset representatives for  <Arg>coords</Arg>.</Returns>
    <Description>
        Inverse of <Ref Func="Reps2FLCoords"/>
</Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="FullCascadeGroup">
  <ManSection>
    <Func Name="FullCascadeGroup" Arg="permgroups"/>
    <Returns>Returns the group of all cascade permutations of the given component groups.</Returns>
    <Description>
      Input is either a list of permutation groups, or n arguments containing those groups.
    </Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="FullCascadeSemigroup">
  <ManSection>
    <Func Name="FullCascadeSemigroup" Arg="semigroups"/>
    <Returns>Returns the semigroup of all cascade transformations of the given component semigroups.</Returns>
    <Description>
      Input is either a list of transformation semigroups (permutation groups), or n arguments containing those semigroups.
    </Description>
  </ManSection>
<#/GAPDoc>


##G

##H

<#GAPDoc Label="HolonomyCascadeSemigroup">
<ManSection>
    <Oper Name="HolonomyCascadeSemigroup" Arg="skeleton"/>
    <Oper Name="HolonomyCascadeSemigroup" Arg="ts"/>
    <Returns>Cascade semigroup that has a surjective homomorphism to <C>ts</C>.</Returns>
    <Description>
    It can take a precomputed skeleton, or a transformation semigroup (computes the skeleton).
<Example>
gap> T4 := FullTransformationSemigroup(4);;
gap> hcs := HolonomyCascadeSemigroup(T4);
&lt;cascade semigroup with 3 generators, 3 levels with (4, 3, 2) pts&gt;
gap> gens := Generators(hcs);
[ &lt;trans cascade with 3 levels with (4, 3, 2) pts, 3 dependencies&gt;,
  &lt;trans cascade with 3 levels with (4, 3, 2) pts, 11 dependencies&gt;,
  &lt;trans cascade with 3 levels with (4, 3, 2) pts, 10 dependencies&gt; ]
gap> surhom := HomomorphismTransformationSemigroup(hcs);
MappingByFunction( &lt;cascade semigroup with 3 generators, 3 levels with (4, 3, \
2) pts&gt;, &lt;transformation semigroup of degree 4 with 3 generators&gt;
 , function( ct ) ... end )
gap> Image(surhom, gens[1]*gens[2]);
Transformation( [ 1, 3, 4, 2 ] )
gap> T := Range(surhom);
&lt;transformation semigroup of degree 4 with 3 generators&gt;
gap> Size(T);
256
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>


##I

<#GAPDoc Label="IdentityCascade">
  <ManSection>
    <Func Name="IdentityCascade" Arg="comps"/>
    <Returns>The identity cascade on the given components.</Returns>
    <Description>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="ImageWitness">
  <ManSection>
    <Func Name="ImageWitness" Arg="skeleton, P, Q"/>
    <Returns>The factorization of <M>s\in S</M> such that <M>P^s=Q</M></Returns>
    <Description>
<Example>
gap> SgpDecFiniteSetDisplayOn();
gap> S := Semigroup([Transformation([6,2,6,5,6,2])],Transformation([3,3,3,2,1,3]));;
gap> sk := Skeleton(S);;
gap> RepresentativeSets(sk);
[ [ {1,2,3,4,5,6} ], [ {2,5,6}, {1,2,3} ], [ {2,6}, {1,3} ], [ {3} ] ]
gap> SgpDecFiniteSetDisplayOff();
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsCascade">
  <ManSection>
    <Filt Name="IsCascade" Arg='obj' Type='Category'/>
    <Filt Name="IsTransCascade" Arg='obj' Type='Category'/>
    <Filt Name="IsPermCascade" Arg='obj' Type='Category'/>
    <Description>
Similarly to transformations and permutations we distinguish between transformation and permutation cascades.
<C>IsCascade</C> is the abstract type.
    </Description>
  </ManSection>
<#/GAPDoc>

##K

##L

<#GAPDoc Label="LevelBuilders">
  <ManSection>
      <Oper Name="LevelBuilders" Arg="coords, transversals"/>
      <Oper Name="LevelBuilders" Arg="coords, FLG"/>
    <Returns></Returns>
    <Description>
    </Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="LevelKillers">
  <ManSection>
      <Oper Name="LevelKillers" Arg="coords, transversals"/>
      <Oper Name="LevelKillers" Arg="coords, FLG"/>
    <Returns></Returns>
    <Description>
    </Description>
  </ManSection>
<#/GAPDoc>




##M

<#GAPDoc Label="MakeRepresentative">
  <ManSection>
    <Func Name="MakeRepresentative" Arg="skeleton,set"/>
    <Returns>A new skeleton in which the given set is a representative in its class.</Returns>
    <Description>
During the computation of a skeleton, the representative sets are chosen automatically (the first ones in the orbit). This function allows to change those, one at a time. It creates a new skeleton, but retains as much as possible from the old orbit (e.g., the orbit is not calculated again).
<Example>
gap> SgpDecFiniteSetDisplayOn();
gap> S := FullTransformationSemigroup(5);;
gap> sk := Skeleton(S);;
gap> RepresentativeSets(sk);
[ [ {1,2,3,4,5} ], [ {1,2,3,4} ], [ {1,2,3} ], [ {1,3} ], [ {1}] ]
gap> sk2 := MakeRepresentative(sk, FiniteSet([2,3,4],5));;
gap> RepresentativeSets(sk2);
[ [ {1,2,3,4,5} ], [ {1,2,3,4} ], [ {2,3,4} ], [ {1,3} ], [ {1}] ]
gap> SgpDecFiniteSetDisplayOff();
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

##N

<#GAPDoc Label="NonImageSingletons">
  <ManSection>
    <Attr Name="NonImageSingletons" Arg="skeleton"/>
    <Returns>Th singleton sets that are not images of the state set.</Returns>
    <Description>
<Example>
gap> SgpDecFiniteSetDisplayOn();
gap> sk := Skeleton(Semigroup(Transformation([6,2,6,6,6,2])));;
gap> NonImageSingletons(sk);
[ {1}, {3}, {4}, {5}, {6} ]
gap> SgpDecFiniteSetDisplayOff();
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>


##O

<#GAPDoc Label="OnCoordinates">
  <ManSection> <Heading>Acting on coordinates by cascades</Heading>
<Func Name="OnCoordinates" Arg="coords, cascade"/>
    <Returns>The coordinates transformed by the cascade.</Returns>
<Description>
A cascade product of <M>n</M> components acts on <M>n</M>-tuples of coordinates, where each coordinate is an element of the state set of the component on the corresponding level.
Therefore, cascade products are transformation semigroups with their state set coordinatized.
Since states are represented by integers, coordinates are lists of integers.
<Example>
gap> c := Cascade([2,3], [ [[],Transformation([2,1])],
>                          [[2],Transformation([3,2,3])],
>                          [[1],Transformation([1,1,2])] ]);;
gap> OnCoordinates([2,1],c);
[ 1, 3 ]
gap> OnCoordinates([1,3],c);
[ 2, 2 ]
</Example>
</Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="OnDepArg">
  <ManSection> <Heading>Evaluating dependency functions</Heading>
<Func Name="OnDepArg" Arg="arg, depfunc"/>
    <Returns>The value of the dependency function on the given argument.</Returns>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="OnFiniteSet">
  <ManSection> <Heading>Acting on finite sets</Heading>
<Func Name="OnFiniteSet" Arg="finset, transformation"/>
    <Returns>finite set.</Returns>
<Description>
<Example>
gap> SgpDecFiniteSetDisplayOn();
gap> P := FiniteSet([2,3]);
{2,3}
gap> t := Transformation([1,1,4,3]);;
gap> OnFiniteSet(P,t);
{1,4}
gap> SgpDecFiniteSetDisplayOff();
gap> OnFiniteSet(P,t*t);
[ true, false, true ]
</Example>
</Description>
  </ManSection>
<#/GAPDoc>

##P

<#GAPDoc Label="Perm2FLCoords">
  <ManSection>
      <Oper Name="Perm2FLCoords" Arg="g, transversals"/>
      <Oper Name="Perm2FLCoords" Arg="g, FLG"/>
    <Returns>Encoded integer coordinates corresponding to  <Arg>g</Arg>.</Returns>
    <Description>
        The combination of <Ref Func="Perm2Reps"/> and <Ref Func="Reps2FLCoords"/>.
</Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="Perm2Reps">
  <ManSection>
      <Oper Name="Perm2Reps" Arg="g, transversals"/>
      <Oper Name="Perm2Reps" Arg="g, FLG"/>
    <Returns>List of coset representatives at each level corresponding to the permutation <Arg>g</Arg></Returns>
<Description>
</Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="PermutatorGroup">
  <ManSection>
<Func Name="PermutatorGroup" Arg="sk, set"/>
    <Returns>Returns the permutator group induced by the transformation semigroup acting on the given subset of the state set.</Returns>
<Description>
It does not give a small generating set.
<Example>
gap> sk := Skeleton(FullTransformationSemigroup(5));;
gap> PermutatorGroup(sk, FiniteSet([1,2,3],5));
Group([ (2,3), (1,2), (1,2,3), (1,3,2), (1,3) ])
</Example>
</Description>
  </ManSection>
<#/GAPDoc>


##R

<#GAPDoc Label="RandomCascade">
  <ManSection>
    <Func Name="RandomCascade" Arg="comps,numofdeps"/>
    <Returns>A cascade with the given number of dependencies (or) less</Returns>
    <Description>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RepresentativeSets">
  <ManSection>
    <Func Name="RepresentativeSets" Arg="skeleton"/>
    <Returns>Chosen representative sets for each subduction class grouped according to their depths.</Returns>
    <Description>
<Example>
gap> SgpDecFiniteSetDisplayOn();
gap> S := Semigroup([Transformation([6,2,6,5,6,2])],Transformation([3,3,3,2,1,3]));;
gap> sk := Skeleton(S);;
gap> RepresentativeSets(sk);
[ [ {1,2,3,4,5,6} ], [ {2,5,6}, {1,2,3} ], [ {2,6}, {1,3} ], [ {3} ] ]
gap> SgpDecFiniteSetDisplayOff();
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="Reps2FLCoords">
  <ManSection>
      <Oper Name="Reps2FLCoords" Arg="reps, transversals"/>
      <Oper Name="Reps2FLCoords" Arg="reps, FLG"/>
    <Returns>Encoded integer coordinates for  <Arg>reps</Arg>.</Returns>
    <Description>
</Description>
  </ManSection>
<#/GAPDoc>


<#GAPDoc Label="Reps2Perm">
  <ManSection>
<Func Name="Reps2Perm" Arg="reps"/>
    <Returns>A permutation coordinatized by <Arg>reps</Arg>.</Returns>
    <Description>
        Inverse of <Ref Func="Perm2Reps"/>
</Description>
  </ManSection>
<#/GAPDoc>


##S

<#GAPDoc Label="SgpDecMakeDoc">
  <ManSection>
    <Func Name="SgpDecMakeDoc" Arg=""/>
    <Returns>Nothing.</Returns>
    <Description>
      This function should be called with no argument to compile the
      &SgpDec; documentation. The manuals can be found in the <C>doc</C> folder.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="SgpDecRunManualExamples">
  <ManSection>
    <Func Name="SgpDecRunManualExamples" Arg=""/>
    <Returns>Nothing.</Returns>
    <Description>
      This function runs the examples from the manual to make
      sure that the documentation is in line with the actual implementation.
      This is an alternative way to test the installation's correctness.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="SgpDecTestInstall">
  <ManSection>
    <Func Name="SgpDecTestInstall" Arg=""/>
    <Returns>Nothing.</Returns>
    <Description>
      This function should be called with no argument to comprehensively
      test that &SgpDec; is working correctly. These tests
      should take no more than a few minutes to complete.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="Singletons">
  <ManSection>
    <Attr Name="Singletons" Arg="skeleton"/>
    <Returns>The states as singleton sets.</Returns>
    <Description>
<Example>
gap> SgpDecFiniteSetDisplayOn();
gap> sk := Skeleton(Semigroup(Transformation([1,1,1])));;
gap> Singletons(sk);
[ {1}, {2}, {3} ]
gap> SgpDecFiniteSetDisplayOff();
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="Skeleton">
  <ManSection>
    <Func Name="Skeleton" Arg="ts"/>
    <Returns>Skeleton of a transformation semigroup.</Returns>
    <Description>
<Example>
gap> Skeleton(FullTransformationSemigroup(4));
&lt;skeleton of Monoid( [ Transformation( [ 2, 3, 4, 1 ] ), Transformation( [ 2, \
1 ] ), Transformation( [ 1, 2, 3, 1 ] ) ] )&gt;
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="SortedExtendedImageSet">
  <ManSection>
    <Func Name="SortedExtendedImageSet" Arg="skeleton"/>
    <Returns>The extended set of images of the semigroup action sorted in descending order.</Returns>
    <Description>
The state set, the singletons and all image sets <M>X^s, s\in S</M>.
<Example>
gap> SgpDecFiniteSetDisplayOn();
gap> S := Semigroup(Transformation([1,1,3,3]));
&lt;commutative transformation semigroup of degree 4 with 1 generator&gt;
gap> sk := Skeleton(S);;
gap> SortedExtendedImageSet(sk);
[ {1,2,3,4}, {1,3}, {1}, {2}, {3}, {4} ]
gap> SgpDecFiniteSetDisplayOff();
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>


##T

<#GAPDoc Label="Chains">
  <ManSection>
    <Func Name="Chains" Arg="skeleton"/>
    <Returns>The set of all tile chains in the <Arg>skeleton</Arg>.</Returns>
    <Description>
<Example>
gap> SgpDecFiniteSetDisplayOn();
gap> sk := Skeleton(FullTransformationSemigroup(3));;
gap> Chains(sk);
[ [ {1,2,3}, {1,2}, {1} ], [ {1,2,3}, {1,3}, {1} ], [ {1,2,3}, {1,2}, {2} ],
  [ {1,2,3}, {2,3}, {2} ], [ {1,2,3}, {1,3}, {3} ], [ {1,2,3}, {2,3}, {3} ] ]
gap> SgpDecFiniteSetDisplayOff();
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="TilesOf">
  <ManSection>
    <Func Name="TilesOf" Arg="skeleton, finiteset"/>
    <Returns>The set of tiles of <Arg>finiteset</Arg>.</Returns>
    <Description>
<Example>
gap> SgpDecFiniteSetDisplayOn();
gap> sk := Skeleton(FullTransformationSemigroup(5));;
gap> TilesOf(sk, FiniteSet([1,2,4],5));
[ {1,2}, {1,4}, {2,4} ]
gap> SgpDecFiniteSetDisplayOff();
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="TransversalsOf">
  <ManSection>
    <Attr Name="TransversalsOf" Arg="FLG"/>
    <Returns>The transversals of an FL cascade group decomposition <Arg>FLG</Arg>.</Returns>
    <Description>
      These are lists of lists of coset representatives on each level. This is the data structure needed for most computations in the decomposition.
    </Description>
  </ManSection>
<#/GAPDoc>
